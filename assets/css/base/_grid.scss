// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 544px, md: 768px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-up($name, $breakpoints) {
		@include media-breakpoint-down($name, $breakpoints) {
			@content;
		}
	}
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-up($lower, $breakpoints) {
		@include media-breakpoint-down($upper, $breakpoints) {
			@content;
		}
	}
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

	$breakpoint-counter: 0;

	@each $breakpoint in map-keys($breakpoints) {
		$breakpoint-counter: ($breakpoint-counter + 1);

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			@if $enable-flex {
				.col-#{$breakpoint} {
					position: relative;
					flex-basis: 0;
					flex-grow: 1;
					max-width: 100%;
					min-height: 1px;
					padding-right: ($grid-gutter-width / 2);
					padding-left:  ($grid-gutter-width / 2);
				}
			}

			@for $i from 1 through $columns {
				.col-#{$breakpoint}-#{$i} {
					@include make-col($i, $columns);
				}
			}

			@each $modifier in (pull, push) {
				@for $i from 0 through $columns {
					.#{$modifier}-#{$breakpoint}-#{$i} {
						@include make-col-modifier($modifier, $i, $columns)
					}
				}
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .col-xs-offset-0
					.offset-#{$breakpoint}-#{$i} {
						@include make-col-modifier(offset, $i, $columns)
					}
				}
			}
		}
	}
}


/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
	margin-left: auto;
	margin-right: auto;
	padding-left:  ($gutter / 2);
	padding-right: ($gutter / 2);
	@if not $enable-flex {
		@include clearfix();
	}
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row($gutter: $grid-gutter-width) {
	@if $enable-flex {
		display: flex;
		flex-wrap: wrap;
	} @else {
		@include clearfix();
	}
	margin-left:  ($gutter / -2);
	margin-right: ($gutter / -2);
}

@mixin make-col($size, $columns: $grid-columns) {
	position: relative;
	min-height: 1px;
	padding-right: ($grid-gutter-width / 2);
	padding-left:  ($grid-gutter-width / 2);

	@if $enable-flex {
		flex: 0 0 percentage($size / $columns);
		// Add a `max-width` to ensure content within each column does not blow out
		// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
		// do not appear to require this.
		max-width: percentage($size / $columns);
	} @else {
		float: left;
		width: percentage($size / $columns);
	}
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
	left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
	right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
	// Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
	@if $type == push {
		@include make-col-push($size, $columns);
	} @else if $type == pull {
		@include make-col-pull($size, $columns);
	} @else if $type == offset {
		@include make-col-offset($size, $columns);
	}
}

// Flex variation
//
// Custom styles for additional flex alignment options.
@if $enable-flex {
	@each $breakpoint in map-keys($grid-breakpoints) {
		// Flex column reordering
		@include media-breakpoint-up($breakpoint) {
			.flex-#{$breakpoint}-first { order: -1; }
			.flex-#{$breakpoint}-last { order: 1; }
		}

		// Alignment for every item
		@include media-breakpoint-up($breakpoint) {
			.flex-items-#{$breakpoint}-top { align-items: flex-start; }
			.flex-items-#{$breakpoint}-middle { align-items: center; }
			.flex-items-#{$breakpoint}-bottom { align-items: flex-end; }
		}

		// Alignment per item
		@include media-breakpoint-up($breakpoint) {
			.flex-#{$breakpoint}-top   { align-self: flex-start; }
			.flex-#{$breakpoint}-middle { align-self: center; }
			.flex-#{$breakpoint}-bottom { align-self: flex-end; }
		}

		// Horizontal alignment of item
		@include media-breakpoint-up($breakpoint) {
			.flex-items-#{$breakpoint}-left { justify-content: flex-start; }
			.flex-items-#{$breakpoint}-center { justify-content: center; }
			.flex-items-#{$breakpoint}-right { justify-content: flex-end; }
			.flex-items-#{$breakpoint}-around { justify-content: space-around; }
			.flex-items-#{$breakpoint}-between { justify-content: space-between; }
		}
	}
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
	.container {
		@include make-container();
		@include make-container-max-widths();
	}
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

@if $enable-grid-classes {
	.container-fluid {
		@include make-container();
	}
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
	.row {
		@include make-row();
	}
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
	@include make-grid-columns();
}